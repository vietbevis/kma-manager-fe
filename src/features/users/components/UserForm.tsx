import ComboboxDepartment from '@/features/departments/components/ComboboxDepartment'
import ComboboxFaculty from '@/features/faculties/components/ComboboxFaculty'
import { ComboboxPosition } from '@/features/positions'
import { ComboboxTaxExemption } from '@/features/tax-exemptions/components'
import { Button } from '@/shared/components/ui/button'
import { Calendar } from '@/shared/components/ui/calendar'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/shared/components/ui/card'
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/shared/components/ui/form'
import { Input } from '@/shared/components/ui/input'
import { Popover, PopoverContent, PopoverTrigger } from '@/shared/components/ui/popover'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/shared/components/ui/select'
import { Separator } from '@/shared/components/ui/separator'
import { Switch } from '@/shared/components/ui/switch'
import { AcademicDegree, FileTypeGroups, Gender } from '@/shared/lib/enum'
import { cn } from '@/shared/lib/utils'
import { CreateUserSchema, type CreateUser, type UpdateUser, type User } from '@/shared/validations/UserSchema'
import { zodResolver } from '@hookform/resolvers/zod'
import { format } from 'date-fns'
import { vi } from 'date-fns/locale'
import { CalendarIcon } from 'lucide-react'
import { useForm } from 'react-hook-form'
import { FileUpload } from './FileUpload'

interface UserFormProps {
  user?: User
  onSubmit: (data: CreateUser | UpdateUser) => void
  isLoading?: boolean
  mode: 'create' | 'edit'
}

export const UserForm = ({ user, onSubmit, isLoading, mode }: UserFormProps) => {
  const form = useForm<CreateUser>({
    resolver: zodResolver(CreateUserSchema),
    defaultValues: {
      fullName: user?.fullName || '',
      gender: user?.gender || Gender.MALE,
      phone: user?.phone || '',
      email: user?.email || '',
      address: user?.address || '',
      citizenId: user?.citizenId || '',
      citizenIdIssuePlace: user?.citizenIdIssuePlace || '',
      citizenIdAddress: user?.citizenIdAddress || '',
      currentAddress: user?.currentAddress || '',
      academicDegree: user?.academicDegree || undefined,
      workplace: user?.workplace || '',
      taxCode: user?.taxCode || '',
      bankAccount: user?.bankAccount || '',
      bankName: user?.bankName || '',
      bankBranch: user?.bankBranch || '',
      salaryCoefficient: user?.salaryCoefficient || 0,
      salary: user?.salary || '',
      profileFile: user?.profileFile || '',
      teachingStatus: user?.teachingStatus || false,
      facultyId: user?.faculty?.id || 1,
      positionId: user?.position?.id || undefined,
      departmentId: user?.department?.id || undefined,
      dateOfBirth: user?.dateOfBirth || undefined,
      citizenIdIssueDate: user?.citizenIdIssueDate || undefined,
      taxExemptionId: user?.taxExemption?.id || undefined
    }
  })

  const handleSubmit = (data: CreateUser) => {
    onSubmit(data)
  }

  return (
    <Card className='py-0'>
      <CardHeader className='sr-only'>
        <CardTitle className='flex items-center gap-2 text-2xl'>
          {mode === 'create' ? 'üë§ Th√™m nh√¢n vi√™n m·ªõi' : '‚úèÔ∏è Ch·ªânh s·ª≠a nh√¢n vi√™n'}
        </CardTitle>
        <CardDescription className='text-base'>
          {mode === 'create'
            ? 'ƒêi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin ƒë·ªÉ t·∫°o t√†i kho·∫£n nh√¢n vi√™n m·ªõi trong h·ªá th·ªëng'
            : 'C·∫≠p nh·∫≠t th√¥ng tin chi ti·∫øt c·ªßa nh√¢n vi√™n'}
        </CardDescription>
      </CardHeader>

      <CardContent className='p-6'>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(handleSubmit)} className='space-y-8'>
            {/* Row 1: Th√¥ng tin c∆° b·∫£n v√† Th√¥ng tin li√™n h·ªá */}
            <div className='grid grid-cols-1 lg:grid-cols-2 gap-8'>
              {/* C·ªôt tr√°i: Th√¥ng tin c∆° b·∫£n */}
              <div className='space-y-6'>
                <div className='space-y-4'>
                  <div className='flex items-center gap-2'>
                    <h3 className='text-lg font-semibold text-primary'>üìã Th√¥ng tin c∆° b·∫£n</h3>
                  </div>

                  <div className='space-y-4'>
                    <FormField
                      control={form.control}
                      name='fullName'
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className='text-sm font-medium'>H·ªç v√† t√™n *</FormLabel>
                          <FormControl>
                            <Input placeholder='Nh·∫≠p h·ªç v√† t√™n ƒë·∫ßy ƒë·ªß' {...field} />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <div className='grid grid-cols-1 md:grid-cols-2 gap-4'>
                      <FormField
                        control={form.control}
                        name='gender'
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel className='text-sm font-medium'>Gi·ªõi t√≠nh</FormLabel>
                            <Select onValueChange={field.onChange} value={field.value}>
                              <FormControl>
                                <SelectTrigger className='w-full'>
                                  <SelectValue placeholder='Ch·ªçn gi·ªõi t√≠nh' />
                                </SelectTrigger>
                              </FormControl>
                              <SelectContent>
                                <SelectItem value={Gender.MALE}>Nam</SelectItem>
                                <SelectItem value={Gender.FEMALE}>N·ªØ</SelectItem>
                              </SelectContent>
                            </Select>
                            <FormMessage />
                          </FormItem>
                        )}
                      />

                      <FormField
                        control={form.control}
                        name='dateOfBirth'
                        render={({ field }) => (
                          <FormItem className='flex flex-col'>
                            <FormLabel className='text-sm font-medium'>Ng√†y sinh</FormLabel>
                            <Popover>
                              <PopoverTrigger asChild>
                                <FormControl>
                                  <Button
                                    variant={'outline'}
                                    className={cn(
                                      'w-full pl-3 text-left font-normal',
                                      !field.value && 'text-muted-foreground'
                                    )}
                                  >
                                    {field.value ? format(field.value, 'dd/MM/yyyy') : <span>Ch·ªçn ng√†y sinh</span>}
                                    <CalendarIcon className='ml-auto h-4 w-4 opacity-50' />
                                  </Button>
                                </FormControl>
                              </PopoverTrigger>
                              <PopoverContent className='w-auto p-0' align='start'>
                                <Calendar
                                  mode='single'
                                  selected={field.value}
                                  onSelect={field.onChange}
                                  disabled={(date) => date > new Date() || date < new Date('1900-01-01')}
                                  captionLayout='dropdown'
                                  locale={vi}
                                />
                              </PopoverContent>
                            </Popover>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    </div>
                    <FormField
                      control={form.control}
                      name='academicDegree'
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className='text-sm font-medium'>Tr√¨nh ƒë·ªô h·ªçc v·∫•n</FormLabel>
                          <Select onValueChange={field.onChange} value={field.value}>
                            <FormControl>
                              <SelectTrigger className='w-full'>
                                <SelectValue placeholder='Ch·ªçn tr√¨nh ƒë·ªô h·ªçc v·∫•n' />
                              </SelectTrigger>
                            </FormControl>
                            <SelectContent>
                              {Object.values(AcademicDegree).map((degree) => (
                                <SelectItem key={degree} value={degree}>
                                  {degree}
                                </SelectItem>
                              ))}
                            </SelectContent>
                          </Select>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <FormField
                      control={form.control}
                      name='workplace'
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className='text-sm font-medium'>N∆°i c√¥ng t√°c</FormLabel>
                          <FormControl>
                            <Input placeholder='Nh·∫≠p n∆°i c√¥ng t√°c hi·ªán t·∫°i' {...field} />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>
                </div>
              </div>

              {/* C·ªôt ph·∫£i: Th√¥ng tin li√™n h·ªá */}
              <div className='space-y-6'>
                <div className='space-y-4'>
                  <div className='flex items-center gap-2'>
                    <h3 className='text-lg font-semibold text-primary'>Th√¥ng tin li√™n h·ªá</h3>
                  </div>

                  <div className='space-y-4'>
                    <FormField
                      control={form.control}
                      name='email'
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className='text-sm font-medium'>Email</FormLabel>
                          <FormControl>
                            <Input type='email' placeholder='example@email.com' {...field} />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <FormField
                      control={form.control}
                      name='phone'
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className='text-sm font-medium'>S·ªë ƒëi·ªán tho·∫°i</FormLabel>
                          <FormControl>
                            <Input placeholder='0987654321' {...field} />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <FormField
                      control={form.control}
                      name='address'
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className='text-sm font-medium'>ƒê·ªãa ch·ªâ th∆∞·ªùng tr√∫</FormLabel>
                          <FormControl>
                            <Input placeholder='Nh·∫≠p ƒë·ªãa ch·ªâ th∆∞·ªùng tr√∫ ƒë·∫ßy ƒë·ªß' {...field} />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <FormField
                      control={form.control}
                      name='currentAddress'
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className='text-sm font-medium'>ƒê·ªãa ch·ªâ hi·ªán t·∫°i</FormLabel>
                          <FormControl>
                            <Input placeholder='Nh·∫≠p ƒë·ªãa ch·ªâ hi·ªán t·∫°i' {...field} />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>
                </div>
              </div>
            </div>

            <Separator className='my-8' />

            {/* Row 2: Th√¥ng tin CCCD v√† C√¥ng vi·ªác */}
            <div className='grid grid-cols-1 lg:grid-cols-2 gap-8'>
              {/* C·ªôt tr√°i: Th√¥ng tin CCCD */}
              <div className='space-y-6'>
                <div className='space-y-4'>
                  <div className='flex items-center gap-2'>
                    <h3 className='text-lg font-semibold text-primary'>Th√¥ng tin cƒÉn c∆∞·ªõc c√¥ng d√¢n</h3>
                  </div>

                  <div className='space-y-4'>
                    <FormField
                      control={form.control}
                      name='citizenId'
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className='text-sm font-medium'>S·ªë CCCD</FormLabel>
                          <FormControl>
                            <Input placeholder='Nh·∫≠p s·ªë cƒÉn c∆∞·ªõc c√¥ng d√¢n' {...field} />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <div className='grid grid-cols-2 gap-4'>
                      <FormField
                        control={form.control}
                        name='citizenIdIssueDate'
                        render={({ field }) => (
                          <FormItem className='flex flex-col'>
                            <FormLabel className='text-sm font-medium'>Ng√†y c·∫•p</FormLabel>
                            <Popover>
                              <PopoverTrigger asChild>
                                <FormControl>
                                  <Button
                                    variant={'outline'}
                                    className={cn(
                                      'w-full pl-3 text-left font-normal',
                                      !field.value && 'text-muted-foreground'
                                    )}
                                  >
                                    {field.value ? format(field.value, 'dd/MM/yyyy') : <span>Ch·ªçn ng√†y c·∫•p</span>}
                                    <CalendarIcon className='ml-auto h-4 w-4 opacity-50' />
                                  </Button>
                                </FormControl>
                              </PopoverTrigger>
                              <PopoverContent className='w-auto p-0' align='start'>
                                <Calendar
                                  mode='single'
                                  selected={field.value}
                                  onSelect={field.onChange}
                                  disabled={(date) => date > new Date() || date < new Date('1900-01-01')}
                                  captionLayout='dropdown'
                                  locale={vi}
                                />
                              </PopoverContent>
                            </Popover>
                            <FormMessage />
                          </FormItem>
                        )}
                      />

                      <FormField
                        control={form.control}
                        name='citizenIdIssuePlace'
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel className='text-sm font-medium'>N∆°i c·∫•p</FormLabel>
                            <FormControl>
                              <Input placeholder='CA H√† N·ªôi' {...field} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    </div>

                    <FormField
                      control={form.control}
                      name='citizenIdAddress'
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className='text-sm font-medium'>ƒê·ªãa ch·ªâ tr√™n CCCD</FormLabel>
                          <FormControl>
                            <Input placeholder='ƒê·ªãa ch·ªâ ghi tr√™n cƒÉn c∆∞·ªõc c√¥ng d√¢n' {...field} />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>
                </div>
              </div>

              {/* C·ªôt ph·∫£i: Th√¥ng tin c√¥ng vi·ªác */}
              <div className='space-y-6'>
                <div className='space-y-4'>
                  <div className='flex items-center gap-2'>
                    <h3 className='text-lg font-semibold text-primary'>Th√¥ng tin c√¥ng vi·ªác</h3>
                  </div>

                  <div className='space-y-4'>
                    <FormField
                      control={form.control}
                      name='facultyId'
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className='text-sm font-medium'>Khoa</FormLabel>
                          <FormControl>
                            <ComboboxFaculty
                              value={form.watch('facultyId') ? String(form.watch('facultyId')) : undefined}
                              onValueChange={(value) => field.onChange(value ? Number(value) : undefined)}
                              placeholder='Ch·ªçn khoa'
                              width='100%'
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <div className='grid grid-cols-2 gap-4'>
                      <FormField
                        control={form.control}
                        name='departmentId'
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel className='text-sm font-medium'>B·ªô m√¥n</FormLabel>
                            <FormControl>
                              <ComboboxDepartment
                                value={form.watch('departmentId') ? String(form.watch('departmentId')) : undefined}
                                onValueChange={(value) => field.onChange(value ? Number(value) : undefined)}
                                placeholder='Ch·ªçn b·ªô m√¥n'
                                width='100%'
                              />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      <FormField
                        control={form.control}
                        name='positionId'
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel className='text-sm font-medium'>Ch·ª©c v·ª•</FormLabel>
                            <FormControl>
                              <ComboboxPosition
                                value={form.watch('positionId') ? String(form.watch('positionId')) : undefined}
                                onValueChange={(value) => field.onChange(value ? Number(value) : undefined)}
                                placeholder='Ch·ªçn ch·ª©c v·ª•'
                                width='100%'
                              />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    </div>
                    <FormField
                      control={form.control}
                      name='teachingStatus'
                      render={({ field }) => (
                        <FormItem>
                          <div className='flex items-center justify-between px-4 py-3 border rounded-lg bg-muted/30'>
                            <FormLabel className='text-sm font-medium flex items-start gap-0.5 flex-col'>
                              Tr·∫°ng th√°i gi·∫£ng d·∫°y
                              <p className='text-xs text-muted-foreground font-normal'>
                                B·∫≠t ƒë·ªÉ cho ph√©p nh√¢n vi√™n n√†y th·ª±c hi·ªán gi·∫£ng d·∫°y
                              </p>
                            </FormLabel>
                            <FormControl>
                              <Switch checked={field.value} onCheckedChange={field.onChange} />
                            </FormControl>
                          </div>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>
                </div>
              </div>
            </div>

            <Separator className='my-8' />

            {/* Row 3: Th√¥ng tin t√†i ch√≠nh v√† File ƒë√≠nh k√®m */}
            <div className='grid grid-cols-1 lg:grid-cols-2 gap-8'>
              {/* C·ªôt tr√°i: Th√¥ng tin t√†i ch√≠nh */}
              <div className='space-y-6'>
                <div className='space-y-4'>
                  <div className='flex items-center gap-2'>
                    <h3 className='text-lg font-semibold text-primary'>Th√¥ng tin t√†i ch√≠nh</h3>
                  </div>

                  <div className='space-y-4'>
                    <FormField
                      control={form.control}
                      name='taxCode'
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className='text-sm font-medium'>M√£ s·ªë thu·∫ø</FormLabel>
                          <FormControl>
                            <Input placeholder='Nh·∫≠p m√£ s·ªë thu·∫ø c√° nh√¢n' {...field} />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <div className='grid grid-cols-2 gap-4'>
                      <FormField
                        control={form.control}
                        name='salaryCoefficient'
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel className='text-sm font-medium'>H·ªá s·ªë l∆∞∆°ng</FormLabel>
                            <FormControl>
                              <Input
                                type='number'
                                step='0.1'
                                placeholder='2.34'
                                {...field}
                                onChange={(e) => field.onChange(Number(e.target.value))}
                              />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />

                      <FormField
                        control={form.control}
                        name='salary'
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel className='text-sm font-medium'>M·ª©c l∆∞∆°ng</FormLabel>
                            <FormControl>
                              <Input placeholder='15,000,000' {...field} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    </div>

                    <div className='grid grid-cols-2 gap-4'>
                      <FormField
                        control={form.control}
                        name='bankAccount'
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel className='text-sm font-medium'>S·ªë t√†i kho·∫£n ng√¢n h√†ng</FormLabel>
                            <FormControl>
                              <Input placeholder='Nh·∫≠p s·ªë t√†i kho·∫£n' {...field} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      <FormField
                        control={form.control}
                        name='taxExemptionId'
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel className='text-sm font-medium'>L√Ω do mi·ªÖn gi·∫£m thu·∫ø</FormLabel>
                            <FormControl>
                              <ComboboxTaxExemption
                                value={form.watch('taxExemptionId') ? String(form.watch('taxExemptionId')) : undefined}
                                onValueChange={(value) => field.onChange(value ? Number(value) : undefined)}
                                placeholder='Ch·ªçn l√Ω do mi·ªÖn gi·∫£m thu·∫ø'
                                width='100%'
                              />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    </div>

                    <div className='grid grid-cols-2 gap-4'>
                      <FormField
                        control={form.control}
                        name='bankName'
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel className='text-sm font-medium'>T√™n ng√¢n h√†ng</FormLabel>
                            <FormControl>
                              <Input placeholder='Vietcombank' {...field} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />

                      <FormField
                        control={form.control}
                        name='bankBranch'
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel className='text-sm font-medium'>Chi nh√°nh</FormLabel>
                            <FormControl>
                              <Input placeholder='H√† N·ªôi' {...field} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    </div>
                  </div>
                </div>
              </div>

              {/* C·ªôt ph·∫£i: File ƒë√≠nh k√®m */}
              <div className='space-y-6'>
                <div className='space-y-4'>
                  <div className='flex items-center gap-2'>
                    <h3 className='text-lg font-semibold text-primary'>File ƒë√≠nh k√®m</h3>
                  </div>

                  <FormField
                    control={form.control}
                    name='profileFile'
                    render={({ field }) => (
                      <FormItem>
                        <FormControl>
                          <FileUpload
                            value={field.value}
                            onChange={field.onChange}
                            label='File l√Ω l·ªãch c√° nh√¢n'
                            description='T·∫£i l√™n file l√Ω l·ªãch, CV ho·∫∑c t√†i li·ªáu li√™n quan'
                            acceptedFileTypes={FileTypeGroups.PROFILE_FILES}
                            maxFiles={1}
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>
              </div>
            </div>

            <Separator className='my-8' />

            {/* Submit Button */}
            <div className='flex justify-end'>
              <Button type='submit' disabled={isLoading}>
                {isLoading ? (
                  <div className='flex items-center gap-2'>
                    <div className='w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin' />
                    ƒêang x·ª≠ l√Ω...
                  </div>
                ) : (
                  <div className='flex items-center gap-2'>
                    {mode === 'create' ? 'Th√™m nh√¢n vi√™n' : 'C·∫≠p nh·∫≠t th√¥ng tin'}
                  </div>
                )}
              </Button>
            </div>
          </form>
        </Form>
      </CardContent>
    </Card>
  )
}
